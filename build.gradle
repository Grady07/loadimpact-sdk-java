import javax.tools.JavaCompiler

plugins {
    id 'java'
    id 'project-report'
    id 'build-dashboard'
    id 'maven-publish'
    id "eu.appsatori.fatjar" version "0.3"
}

group = 'com.loadimpact'
version = '1.4'

ext {
    jerseyVersion = '2.17'
    jodaVersion = '2.7'
    junitVersion = '4.12'
    hamcrestVersion = '1.3'
    mockitoVersion = '1.10.19'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTests/java')
        resources.srcDir file('src/integrationTests/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
    compile "org.glassfish.jersey.media:jersey-media-multipart:${jerseyVersion}"
    compile "org.glassfish.jersey.media:jersey-media-json-processing:${jerseyVersion}"
    compile "joda-time:joda-time:${jodaVersion}"

    testCompile "junit:junit:${junitVersion}"
    testCompile "org.hamcrest:hamcrest-library:${hamcrestVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
}

tasks.withType(JavaCompiler) {
    options.compilerArgs = ['-Xlint:unchecked']
}

jar {
    classifier = 'lib'
}

fatJar {
    classifier = 'withDepends'
    manifest {
        attributes 'Main-Class': "com.loadimpact.CheckApp",
                'Built-Date': new Date().format('yyyy-MM-dd HH:mm:dd'),
                'Built-By': System.getProperty('user.name', 'gradle'),
                'More-Info': 'http://developers.loadimpact.com/sdk/#li-docs-sdk-java',
                'Source-Code': 'https://github.com/loadimpact/loadimpact-sdk-java'
    }
}

assemble.dependsOn = [fatJar, jar]    //ensure we build both the plain JAR and the fat JAR

test {
    testLogging.showStandardStreams = true
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging.showStandardStreams = true

    reports.html.destination = file("${reports.html.destination}/../integration-tests")
    reports.junitXml.destination = file("${reports.junitXml.destination}/integration-tests")

    doFirst {
        System.properties.findAll { it.key.toString().startsWith('loadimpact.') }.each { name, value ->
            systemProperties[name] = value
        }
    }
}


javadoc {
    options.overview = "./src/docs/javadoc-overview.html"
    options.tags = ['date:a:Created Date', 'user:a:Developed By']
}


publishing {
    publications {
        fat(MavenPublication) {
            artifact fatJar {
                classifier 'withDepends'
            }
        }

        lib(MavenPublication) {
            artifact jar {
                classifier 'lib'
            }
        }
    }

    repositories {
        maven {
            url "${buildDir}/mvn-repo"
        }
        
        // bintray repo
    }
}

